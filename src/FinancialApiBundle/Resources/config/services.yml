services:

    signature.security.authentication.provider:
        class: App\FinancialApiBundle\Security\Authentication\Provider\SignatureAuthenticationProvider
        arguments: ["", "%kernel.cache_dir%/security/nonces"]

    signature.security.authentication.listener:
        class: App\FinancialApiBundle\Security\Firewall\SignatureListener
        arguments: ["@security.token_storage", "@security.authentication.manager","@service_container"]

    access_key.security.user_provider:
        class: App\FinancialApiBundle\Security\AccessKeyUserProvider
        arguments: ["@fos_user.user_manager"]

    app.incoming_controller:
        class: App\FinancialApiBundle\Controller\Transactions\IncomingController2
        calls:
            - [setContainer, ["@service_container"] ]

    app.incoming_controller3:
        class: App\FinancialApiBundle\Controller\Transactions\IncomingController3
        calls:
            - [ setContainer, [ "@service_container" ] ]

    app.crud_v3:
        class: App\FinancialApiBundle\Controller\CRUD\CRUDController
        calls:
            - [ setContainer, [ "@service_container" ] ]

    messenger:
        class: App\FinancialApiBundle\DependencyInjection\Transactions\Core\Notificator
        arguments:
            - "@service_container"
            - "@logger"
            - "@doctrine.orm.entity_manager"
            - "@App\\FinancialApiBundle\\DependencyInjection\\App\\Commons\\UPCNotificator"

    bonissim_service:
        class: App\FinancialApiBundle\DependencyInjection\Transactions\BonissimAccountService
        arguments:
            - "@service_container"

    command.delegate.payment:
        class: App\FinancialApiBundle\Command\DelegatedExchangeCommand
        calls:
            - [setContainer, ["@service_container"] ]

    auth.logger:
        class:     Symfony\Bridge\Monolog\Logger
        arguments: [auth]
        calls:
            - [pushHandler, ["@auth.logger_handler"]]

    auth.logger_handler:
        class:     Monolog\Handler\StreamHandler
        arguments: ['%kernel.logs_dir%/%kernel.environment%.auth.log', 200]

    transaction.logger:
        class:     Symfony\Bridge\Monolog\Logger
        arguments: [transaction]
        calls:
            - [pushHandler, ["@transaction.logger_handler"]]

    transaction.logger_handler:
        class:     Monolog\Handler\StreamHandler
        arguments: ['%kernel.logs_dir%/%kernel.environment%.transaction.log', 200]

    bonus.logger:
        class: Symfony\Bridge\Monolog\Logger
        arguments: [ bonus ]
        calls:
            - [ pushHandler, [ "@bonus.logger_handler" ] ]

    bonus.logger_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [ '%kernel.logs_dir%/%kernel.environment%.bonus.log', 200 ]

    discourse.logger:
        class: Symfony\Bridge\Monolog\Logger
        arguments: [ discourse ]
        calls:
            - [ pushHandler, [ "@discourse.logger_handler" ] ]

    discourse.logger_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [ '%kernel.logs_dir%/%kernel.environment%.discourse.log', 200 ]

    badges.logger:
        class: Symfony\Bridge\Monolog\Logger
        arguments: [ badges ]
        calls:
            - [ pushHandler, [ "@badges.logger_handler" ] ]

    badges.logger_handler:
        class: Monolog\Handler\StreamHandler
        arguments: [ '%kernel.logs_dir%/%kernel.environment%.badges.log', 200 ]

    manager.logger:
        class:     Symfony\Bridge\Monolog\Logger
        arguments: [manager]
        calls:
            - [pushHandler, ["@manager.logger_handler"]]

    manager.logger_handler:
        class:     Monolog\Handler\StreamHandler
        arguments: ['%kernel.logs_dir%/%kernel.environment%.manager.log', 200]

    file_manager:
        class: App\FinancialApiBundle\DependencyInjection\App\Commons\UploadManager
        arguments: ['@service_container']

    file_setter.listener:
        class: App\FinancialApiBundle\EventListener\FileSetterListener
        arguments: ["@service_container"]
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    delegated_change.statistics_updater:
        class: App\FinancialApiBundle\EventListener\DelegatedChangeStatisticsUpdater
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    kyc.listener:
        class: App\FinancialApiBundle\EventListener\KycListener
        arguments: ["@service_container"]
        tags:
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: prePersist }

    transaction.listener:
        class: App\FinancialApiBundle\EventListener\TransactionListener
        arguments: ["@service_container", "@net.app.commons.permissions_checker"]
        tags:
            - { name: doctrine_mongodb.odm.event_listener, event: preUpdate }
            - { name: doctrine_mongodb.odm.event_listener, event: postUpdate }
            - { name: doctrine_mongodb.odm.event_listener, event: prePersist }

    oauth_event_listener:
          class:  App\FinancialApiBundle\EventListener\OAuthEventListener
          arguments: ["@service_container"]
          tags:
              - { name: kernel.event_listener, event: fos_oauth_server.pre_authorization_process, method: onPreAuthorizationProcess }
              - { name: kernel.event_listener, event: fos_oauth_server.post_authorization_process, method: onPostAuthorizationProcess }

    upload_controller:
        class:  App\FinancialApiBundle\Controller\Management\User\UploadController
        calls:
            - [setContainer, ["@service_container"]]


