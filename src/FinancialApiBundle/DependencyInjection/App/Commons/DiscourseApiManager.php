<?php
/**
 * Created by PhpStorm.
 * User: lluis
 * Date: 2/25/15
 * Time: 8:16 PM
 */

namespace App\FinancialApiBundle\DependencyInjection\App\Commons;

use App\FinancialApiBundle\Entity\Group;
use Monolog\Logger;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpKernel\Exception\HttpException;

class DiscourseApiManager{

    private $container;
    private $logger;

    public function __construct(ContainerInterface $container, Logger $logger){
        $this->container = $container;
        $this->logger = $logger;
    }

    public function register(Group $account){

        $this->logger->info("Registering account ".$account->getName());
        $password = $this->generateRandomPassword();

        $this->checkAccountHasNeededFields($account);

        $email = $account->getEmail();
        if(!$email){
            $this->logger->info("Setting fake email");
            $email = $account->getRezeroB2bUsername()."@atarca-b2b.es";
        }
        $data = array(
            "name"=> $account->getName(),
            "email"=> $email,
            "password"=> $password,
            "username"=> $account->getRezeroB2bUsername(),
            "active"=> true,
            "approved"=> true,
            "user_fields" => array($account->getName(), $account->getKycManager()->getName())
        );

        return $this->_callDiscourse('users.json', $this->getAdminCredentials(), 'POST', $data);

    }

    public function generateApiKeys(Group $account){
        $this->logger->info("Generating Api Keys for ".$account->getName());
        $data = array(
            "key" => [
                "username" => $account->getRezeroB2bUsername(),
                "description" => "Generated by REC Api:".$account->getName()
            ]
        );
        $response = $this->_callDiscourse('admin/api/keys', $this->getAdminCredentials(), 'POST', $data);
        $this->logger->info(json_encode($response));
        if(isset($response['key'])){
            $this->logger->info("Api Keys Generated successfully for ".$account->getName());
            return $response['key']['key'];
        }
        $this->logger->error("Something went wrong Generating Api Keys for ".$account->getName());

        return 'error';
    }

    public function updateName(Group $account, $name){
        $this->logger->info("Changing name for ".$account->getName()." to ".$name);
        $data = array(
            "name" => $name
        );
        return $this->bridgeCall($account, 'users/'.$account->getRezeroB2bUsername().'.json', 'PUT', $data);

    }

    public function bridgeCall(Group $account, $endpoint, $method, $data = [], $urlParams = []){
        $this->logger->info("Starting Bridge call for ".$account->getName());
        $credentials = array(
            'Api-Key: '.$account->getRezeroB2bApiKey(),
            'Api-Username: '. $account->getRezeroB2bUsername()
        );

        return $this->_callDiscourse($endpoint, $credentials, $method, $data, $urlParams);

    }

    private function generateRandomPassword() {
        $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
        $pass = array(); //remember to declare $pass as an array
        $alphaLength = strlen($alphabet) - 1; //put the length -1 in cache
        for ($i = 0; $i < 12; $i++) {
            $n = rand(0, $alphaLength);
            $pass[] = $alphabet[$n];
        }
        return implode($pass); //turn the array into a string
    }

    private function _callDiscourse($endpoint, $credentials, $method, $data = array(), $urlParams = array()){
        $this->logger->info("Calling discourse...");
        $base_url  = $this->container->getParameter('discourse_url');
        $curl = curl_init();

        if($urlParams){
            $encoded_params = http_build_query($urlParams);
            $endpoint .= '?' . $encoded_params;
        }
        curl_setopt_array($curl, array(
            CURLOPT_URL => $base_url.'/'.$endpoint,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => $method,
            CURLOPT_HTTPHEADER => $credentials
        ));


        if($method === 'POST'){
            $encodedData = http_build_query($data);
            curl_setopt($curl, CURLOPT_POST, true);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $encodedData);
        }

        if($method === 'PUT'){
            $encodedData = http_build_query($data);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $encodedData);
        }


        $response = curl_exec($curl);

        curl_close($curl);

        $decodedResponse = json_decode($response, true);

        if(isset($decodedResponse['errors'])){
            $this->logger->error("Something went wrong in DiscourseApiManager CallDiscourse");
            if(isset($decodedResponse['message'])){
                $this->logger->error($decodedResponse['message']);
                throw new HttpException(400, $decodedResponse['message']);
            }else{
                $this->logger->error($decodedResponse['errors'][0]);
                throw new HttpException(400, $decodedResponse['errors'][0]);
            }
        }

        $this->logger->info("Call discourse went well");
        return $decodedResponse;
    }

    private function getAdminCredentials(){
        $admin_username = $this->container->getParameter("discourse_admin_username");
        $admin_api_key = $this->container->getParameter("discourse_admin_api_key");

        return array(
            'Api-Username: '.$admin_username,
            'Api-Key: '.$admin_api_key,
            'Content-Type: multipart/form-data',
        );
    }

    private function checkAccountHasNeededFields(Group $account){

        if(!$account->getRezeroB2bUsername()) throw new HttpException(400, 'Rezero Username is not set');
        if(!$account->getName()) throw new HttpException(400, 'Account name is not set');

    }

}