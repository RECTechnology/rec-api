<?php

namespace App\Controller\CRUD;

use App\Controller\Transactions\IncomingController2;
use App\DataFixture\ActivityFixture;
use App\Entity\Activity;
use App\Entity\Badge;

use App\Entity\AccountCampaign;
use App\Entity\Campaign;
use App\Entity\DelegatedChangeData;
use App\Entity\Mailing;
use App\Entity\MailingDelivery;
use App\Entity\SmsTemplates;
use App\Entity\User;
use App\Entity\UserGroup;
use App\Exception\AppException;
use App\Financial\Driver\LemonWayInterface;
use DateTime;
use Doctrine\Common\Annotations\AnnotationException;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\QueryBuilder;
use Spipu\Html2Pdf\Exception\Html2PdfException;
use Spipu\Html2Pdf\Html2Pdf;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpFoundation\Request;

/**
 * Class CampaignsController
 * @package App\Controller\CRUD
 */
class CampaignsController extends CRUDController {

    /**
     * @return array
     */
    function getCRUDGrants()
    {
        $grants = parent::getCRUDGrants();
        $grants[self::CRUD_INDEX] = self::ROLE_PUBLIC;
        return $grants;
    }

    public function indexAction(Request $request, $role)
    {
        return parent::indexAction($request, $role);
    }

    public function deleteAction($role, $id)
    {
        //check if this campaign has joined in accounts
        $em = $this->get('doctrine.orm.entity_manager');
        $account_campaigns = $em->getRepository(AccountCampaign::class)->findBy(array('campaign' => $id));
        $campaign = $em->getRepository(Campaign::class)->find($id);
        $isV1Campaign = $campaign->getVersion() < 2;

        if($account_campaigns) throw new HttpException(403, 'Campaign with joined in users can not be removed');
        if($isV1Campaign) throw new HttpException(403, 'Campaigns V1 can not be removed');

        return parent::deleteAction($role, $id); // TODO: Change the autogenerated stub
    }

    public function searchAction(Request $request, $role)
    {
        if($request->query->has('statuses')){
            $response = parent::searchAction($request, $role);
            $content = json_decode($response->getContent(),true);
            $status_array = $request->query->get('statuses');
            $campaigns = [];
            foreach ($content['data']['elements'] as $element){
                if(in_array($element['status'], $status_array)){
                    $campaigns[] = $element;
                }
            }
            return $this->rest(
                self::HTTP_STATUS_CODE_OK,
                "ok",
                "Request successful",
                array(
                    'total' => count($campaigns),
                    'elements' => $campaigns
                )
            );
        }

        return parent::searchAction($request, $role);
    }

}
